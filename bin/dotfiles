#!/bin/bash

# color codes
LBLACK='\033[01;30m'
LGREEN='\033[01;32m'
LRED='\033[01;31m'
LYELLOW='\033[01;33m'
OVERWRITE='\e[1A\e[K'
NOCOLOR='\033[0m'

# variables
DOTFILES_DIR="$HOME/.dotfiles"
DOTFILES_LOG="$HOME/.dotfiles.log"
GIT_SSH="git@github.com:thalfeust/dotfiles.git"

# creates log file
function _create_log {
    # create log if it doesn't exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi

    # empty log
    >$DOTFILES_LOG
}

# colors the message given as argument with spacing
# when a new message is received, overwrite the color of the previous
# if no message is givem, only updates the last message
function _print {
    # if the function has already been called, complete the previous print
    if [[ $LAST_PRINT != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [✓]  ${LBLACK}${LAST_PRINT}${NOCOLOR}\n"
    fi

    if [[ -n "$1" ]]; then
        # save message and print
        LAST_PRINT=$1
        printf "${LBLACK} [ ]  ${LAST_PRINT} \n${NOCOLOR}"
    fi
}

function _raise_error_and_quit {
    # overwrite last print
    printf "${OVERWRITE}${LRED} [✗]  ${LAST_PRINT}${NOCOLOR}\n"

    # read error from log and add spacing
    while read line; do
        printf "      ${line}\n"
    done <$DOTFILES_LOG

    printf "${LYELLOW}An error occured, see ${DOTFILES_LOG} for further information${NOCOLOR}\n"

    # exit installation
    exit 1
}

# performs commands with error checking
function _cmd {
    # hide stdout
    if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
        return 0 # success
    fi

    _raise_error_and_quit
}

function _dependencies_installation {
    _print "Updating APT"
    _cmd "sudo apt update"

    if ! dpkg -s python3 >/dev/null 2>&1; then
        _print "Installing Python3"
        _cmd "sudo apt install -y python3"
    fi

    if ! dpkg -s python3-pip >/dev/null 2>&1; then
        _print "Installing Python3-pip"
        _cmd "sudo apt install -y python3-pip"
    fi

    if ! dpkg -s python3-watchdog >/dev/null 2>&1; then
        _print "Installing Python3-watchdog"
        _cmd "sudo apt install -y python3-watchdog"
    fi

    # ansible installation
    if ! dpkg -s ansible >/dev/null 2>&1; then
        _print "Installing Ansible"
        _cmd "sudo apt install -y ansible"
    fi
}

pushd "$HOME" 2>&1 >/dev/null

# check OS compatibility
source /etc/os-release
_print "Loading Setup for detected OS: $ID"
if [[ -n "$ID" && "$ID" != "ubuntu" ]]; then
    _print "Unsupported OS"
    # log
    _cmd "echo 'Unsupported OS'"
    _raise_error_and_quit
fi

# dependencies installation using apt
_dependencies_installation

# clone or update the repository
if ! [[ -d "$DOTFILES_DIR" ]]; then
    _print "Cloning repository"
    _cmd "git clone --quiet https://github.com/thalfeust/dotfiles.git $DOTFILES_DIR"
    _cmd "chmod +x $DOTFILES_DIR/bin/dotfiles"
else
    _print "Updating repository"
    _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" 2>&1 >/dev/null

REMOTE_URL=$(git config --get remote.origin.url)
if ! [[ "$REMOTE_URL" = "$GIT_SSH" ]]; then
    _print "Updating repository remote url"
    _cmd "git remote set-url origin $GIT_SSH"
fi

_print "Running playbook"
ansible-playbook --inventory inventory.yml --ask-vault-pass "$DOTFILES_DIR/main.yml" "$@"

_print "Reload the bash configuration"
_cmd "source $HOME/.bashrc"

popd 2>&1 >/dev/null
popd 2>&1 >/dev/null

# final print
_print
